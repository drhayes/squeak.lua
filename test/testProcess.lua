local Process = require('squeak.process')
local lume = require('lib.lume')

describe('process', function()
  before_each(function()
    lume.clear(Process.roots)
  end)

  it('works at all', function()
    assert.are.equal('table', type(Process))
  end)

  it('creating one adds it to the root process', function()
    local p1 = Process()
    assert.truthy(p1.roots)
    assert.equal(1, #p1.roots)
    local p2 = Process()
    assert.truthy(p2.roots)
    assert.equal(p1.roots, p2.roots)
    assert.equal(2, #p1.roots)
  end)

  it('can be attached to another as a child process', function()
    local p1 = Process()
    local p2 = Process(p1)
    assert.equal(p1, p2.parent)
    assert.equal(1, #p1.childProcesses)
    assert.equal(1, #Process.roots)
    assert.equal(p2, p1.childProcesses[1])
  end)

  it('detaches from prior parent before attaching', function()
    local p1 = Process()
    local p2 = Process()
    local p3 = Process()
    assert.equal(3, #Process.roots)
    p1:attach(p2)
    assert.equal(2, #Process.roots)
    p1:attach(p3)
    assert.equal(1, #Process.roots)
    assert.equal(2, #p1.childProcesses)
    assert.equal(0, #p2.childProcesses)
    assert.equal(0, #p3.childProcesses)
    p2:attach(p3)
    assert.equal(1, #Process.roots)
    assert.equal(1, #p1.childProcesses)
    assert.equal(1, #p2.childProcesses)
    assert.equal(0, #p3.childProcesses)
  end)

  it('can run unless it is disabled', function()
    local p1 = Process()
    assert.truthy(p1:canRun())
    p1.enabled = false
    assert.falsy(p1:canRun())
    p1.enabled = true
    assert.truthy(p1:canRun())
  end)

  it('runPreUpdate runs unless enabled is false', function()
    local p1 = Process()
    local p2 = Process(p1)
    local p3 = Process(p1)
    p1.preUpdate = spy.new(function() end)
    p2.preUpdate = spy.new(function() end)
    p3.preUpdate = spy.new(function() end)
    Process.runPreUpdate(p1, 1)
    assert.spy(p1.preUpdate).was.called(1)
    assert.spy(p2.preUpdate).was.called(1)
    assert.spy(p3.preUpdate).was.called(1)
    p1.enabled = false
    Process.runPreUpdate(p1, 1)
    assert.spy(p1.preUpdate).was.called(1)
    assert.spy(p2.preUpdate).was.called(1)
    assert.spy(p3.preUpdate).was.called(1)
    p1.enabled = true
    p2.enabled = false
    Process.runPreUpdate(p1, 1)
    assert.spy(p1.preUpdate).was.called(2)
    assert.spy(p2.preUpdate).was.called(1)
    assert.spy(p3.preUpdate).was.called(2)
  end)

  it('runUpdate runs unless enabled is false', function()
    local p1 = Process()
    local p2 = Process(p1)
    local p3 = Process(p1)
    p1.update = spy.new(function() end)
    p2.update = spy.new(function() end)
    p3.update = spy.new(function() end)
    Process.runUpdate(p1, 1)
    assert.spy(p1.update).was.called(1)
    assert.spy(p2.update).was.called(1)
    assert.spy(p3.update).was.called(1)
    p1.enabled = false
    Process.runUpdate(p1, 1)
    assert.spy(p1.update).was.called(1)
    assert.spy(p2.update).was.called(1)
    assert.spy(p3.update).was.called(1)
    p1.enabled = true
    p2.enabled = false
    Process.runUpdate(p1, 1)
    assert.spy(p1.update).was.called(2)
    assert.spy(p2.update).was.called(1)
    assert.spy(p3.update).was.called(2)
  end)

  it('runPostUpdate runs unless enabled is false', function()
    local p1 = Process()
    local p2 = Process(p1)
    local p3 = Process(p1)
    p1.postUpdate = spy.new(function() end)
    p2.postUpdate = spy.new(function() end)
    p3.postUpdate = spy.new(function() end)
    Process.runPostUpdate(p1, 1)
    assert.spy(p1.postUpdate).was.called(1)
    assert.spy(p2.postUpdate).was.called(1)
    assert.spy(p3.postUpdate).was.called(1)
    p1.enabled = false
    Process.runPostUpdate(p1, 1)
    assert.spy(p1.postUpdate).was.called(1)
    assert.spy(p2.postUpdate).was.called(1)
    assert.spy(p3.postUpdate).was.called(1)
    p1.enabled = true
    p2.enabled = false
    Process.runPostUpdate(p1, 1)
    assert.spy(p1.postUpdate).was.called(2)
    assert.spy(p2.postUpdate).was.called(1)
    assert.spy(p3.postUpdate).was.called(2)
  end)

  it('will not run children if enabled is false after preUpdate', function()
    local p1 = Process()
    local p2 = Process(p1)
    p1.preUpdate = function()
      p1.enabled = false
    end
    p2.preUpdate = spy.new(function() end)
    Process.runPreUpdate(p1, 1)
    assert.falsy(p1.enabled)
    assert.truthy(p2.enabled)
    assert.spy(p2.preUpdate).called(0)
  end)

  it('will not run children if enabled is false after update', function()
    local p1 = Process()
    local p2 = Process(p1)
    p1.update = function()
      p1.enabled = false
    end
    p2.update = spy.new(function() end)
    Process.runUpdate(p1, 1)
    assert.falsy(p1.enabled)
    assert.truthy(p2.enabled)
    assert.spy(p2.update).called(0)
  end)

  it('will not run children if enabled is false after postUpdate', function()
    local p1 = Process()
    local p2 = Process(p1)
    p1.postUpdate = function()
      p1.enabled = false
    end
    p2.postUpdate = spy.new(function() end)
    Process.runPostUpdate(p1, 1)
    assert.falsy(p1.enabled)
    assert.truthy(p2.enabled)
    assert.spy(p2.postUpdate).called(0)
  end)

  it('can detach child processes', function()
    local p1 = Process()
    local p2 = Process(p1)
    assert.equal(1, #p1.childProcesses)
    assert.equal(1, #Process.roots)
    p1:detach(p2)
    assert.equal(0, #p1.childProcesses)
    assert.equal(2, #Process.roots)
  end)
end)
